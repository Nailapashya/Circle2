// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// user Model
model User {
  id              String          @id @default(uuid())
  username        String?          @unique
  fullname        String?
  email           String?          @unique
  password        String?
  profile_picture String?
  bio             String?
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  likes           Like[]
  threads         Thread[]
  replies         Reply[]
  follower        UserFollowing[] @relation(name: "Following")
  following       UserFollowing[] @relation(name: "Follower")
}

model UserFollowing {
  id          String   @id @default(uuid())
  follower    User     @relation(name: "Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User     @relation(name: "Following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
  FolowedAt   DateTime @default(now())
  isFollow    Boolean? @default(false)
}

model Thread {
  id         String         @id @default(uuid())
  content    String
  created_at DateTime       @default(now())
 
  user_id    String
  isLiked    Boolean?       @default(false)
  images     ThreadImage[] 
  user       User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
   Like       Like[]
  replies    Reply[] 
}

model Reply {
  id         String   @id @default(uuid())
  content    String
  image      String?
  created_at DateTime @default(now())
  Thread     Thread   @relation(fields: [thread_id], references: [id], onDelete: Cascade)
  thread_id  String
  User       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String
}

model Like {
  id        String @id @default(uuid())
  user      User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id   String
  thread    Thread @relation(fields: [thread_id], references: [id], onDelete: Cascade)
  thread_id String
}

model ThreadImage {
  id        String   @id @default(uuid())
  url       String
  thread    Thread   @relation(fields: [thread_id], references: [id], onDelete: Cascade)
  thread_id String
}
